/*********************************************************************
* Sistema de control de un convertidors DC-AC para el control de un motor asíncrono monofásico
* DCPE Primavera 2017
* Realizado por Nicolás Murguizur
* La consigna de entrada a set_pwmX_duty() tiene 16 bits para trabajar de 0 a 100
*
*
*
*********************************************************************/

//Inclusión de librerías y configuración del PIC

#include <16F883.h>
#device adc=10
#include <math.h>

#FUSES NOWDT                        //No Watch Dog Timer
//#FUSES HS                           //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD)

#FUSES INTRC_IO                   //Internal RC Osc, no CLKOUT
#FUSES NOPUT                        //No Power Up Timer
#FUSES MCLR                         //Master Clear pin enabled
#FUSES NOPROTECT                    //Code not protected from reading
#FUSES NOCPD                        //No EE protection
#FUSES NOBROWNOUT                   //No brownout reset
#FUSES IESO                         //Internal External Switch Over mode enabled
#FUSES FCMEN                        //Fail-safe clock monitor enabled
#FUSES NOLVP                        //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O
#FUSES NODEBUG                      //No Debug mode for ICD
#FUSES NOWRT                        //Program memory not write protected
#FUSES BORV40                       //Brownout reset at 4.0V
#FUSES RESERVED                     //Used to set the reserved FUSE bits

//#use delay(clock=20M)
#use delay(clock=4M)

//#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,errors)

// Asignación de pines en el diseño. 

//(Condiciones placa Nico)
/*#define LCD_DB7   PIN_A5          // pin 14 LCD         // Asignación de pines LCD-PIC en el diseño. 
#define LCD_DB6   PIN_A4            // pin 13 LCD 
#define LCD_DB5   PIN_A3            // pin 12 LCD 
#define LCD_DB4   PIN_A2            // pin 11 LCD 
#define LCD_E     PIN_A1            // pin 06 LCD 
//#define LCD_RW    PIN_B0          // pin 05 LCD It is earthed at the display. 
#define LCD_RS    PIN_A0            // pin 04 LCD 
*/

//Condiciones PCB LCD    **Comprobado y correcto**
#define LCD_DB7   PIN_C4            // pin 14 LCD         
#define LCD_DB6   PIN_C5            // pin 13 LCD 
#define LCD_DB5   PIN_B0            // pin 12 LCD 
#define LCD_DB4   PIN_B4            // pin 11 LCD 
#define LCD_E     PIN_B5            // pin 06 LCD 
//#define LCD_RW    PIN_B0          // pin 05 LCD It is earthed at the display. 
#define LCD_RS    PIN_A0            // pin 04 LCD 

#define CPLD_ENABLE    PIN_C3       // enable de la CPLD

// **Todas las asignaciones inferiores comprobadas**
#define MENU      PIN_B2            // pin 21 PIC 
#define SELECT    PIN_B1            // pin 22 PIC 
//#define Velocidad   1             
#define AlCorr   PIN_A4             // pin 6 PIC
#define AlVolt   PIN_A3             // pin 5 PIC
#define AlTemp   PIN_A2             // pin 4 PIC

#include "Flex_LCD420.c"            //Librería LCD 

//Definición de variables

unsigned int8 vT0=206;              //tT0=4*div/fclock*(256-vT0) 
unsigned int8 vT2=24;               //tT2=4*div/fclock*(vT2+1). Es un contador decremental. 
int1 MARCHA=0;                        //Bit de Menu
int1 MARCHAant=1;
int1 SEL;                           //bit de Selección
int   k=0;                          //Variable usada en pwm_update().
int1  OFF=1;                        //Estado de funcionamiento
int1 AV,AI,AT,Alarma;

//int1 flag=0;                      //Bit ue se pone a 1 para que elbucle de cambiar de velocidad solo sea al pricipio eliminado mediante el uso de la funcion selvel()
const int8 PWM[360]={50,51,52,53,54,55,56,56,57,58,59,60,61,62,62,63,64,65,66,67,67,68,69,70,71,71,72,73,74,75,75,76,77,77,78,79,80,80,81,82,82,83,84,84,85,85,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,94,95,95,96,96,96,96,97,97,97,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,100,99,99,99,99,99,99,99,99,99,99,99,98,98,98,98,98,97,97,97,96,96,96,96,95,95,94,94,94,93,93,92,92,91,91,90,90,89,89,88,88,87,87,86,85,85,84,84,83,82,82,81,80,80,79,78,77,77,76,75,75,74,73,72,71,71,70,69,68,67,67,66,65,64,63,62,62,61,60,59,58,57,56,56,55,54,53,52,51,50,50,49,48,47,46,45,44,43,43,42,41,40,39,38,37,37,36,35,34,33,32,32,31,30,29,28,28,27,26,25,25,24,23,22,22,21,20,19,19,18,17,17,16,15,15,14,14,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,3,3,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,4,4,5,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,14,14,15,15,16,17,17,18,19,19,20,21,22,22,23,24,25,25,26,27,28,28,29,30,31,32,32,33,34,35,36,37,37,38,39,40,41,42,43,43,44,45,46,47,48,49,50};
int16 punter_pwm_2=89;


int16 cont=0;
int16 RC=0;
int16 vel=0;

void pwm_update();
void configuraPWM();
void selvel();
void BorrFila2();

#INT_Timer0
void ext_int(){
   set_timer0(vT0);
   k++;
   if(k==11){
      pwm_update();
      k=0;
   }
}


//Funcion de recorrido de tabla y actualización de duty cycle. Se recorre la misma tabla con un offset 
void pwm_update(){
  
   cont+=vel;
   punter_pwm_2+=vel;
   if (cont>=360){
      cont=cont-360;
   }
   if(punter_pwm_2>=360){
      punter_pwm_2=punter_pwm_2-360;
   }
   RC=PWM[cont];        //La Relacion de Conduccion viene dada por el puntero recorriendo la tabla
   set_pwm1_duty(RC);
   RC=PWM[punter_pwm_2];
   set_pwm2_duty(RC);
}


void configuraPWM(){
   set_timer0(vT0); // 20 MHz clock, no prescaler, set timer 0 to overflow in 35us: 256-(.000035/(4/20000000))
   enable_interrupts(INT_TIMER0); // turn on external interrupt H->L
   enable_interrupts(GLOBAL); // turn on interrupts
   setup_ccp1(CCP_PWM); // saldrá la señal PWM por el pin 13
   setup_ccp2(CCP_PWM);
   setup_timer_2(T2_DIV_BY_1, vT2, 1);
} 

void configura(){
   setup_adc_ports(sAN1|VSS_VDD);
   setup_adc(ADC_CLOCK_DIV_32);
   setup_spi(SPI_SS_DISABLED);
   setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1);
   setup_timer_1(T1_DISABLED);
   setup_timer_2(T2_DISABLED,0,1);
   setup_comparator(NC_NC_NC_NC);
   setup_vref(FALSE); //Setup_Oscillator parameter not selected from Intr Oscillator Config tab 
   }


//Funcion para borrar la fila 2 de la LCD
void BorrFila2(){
     lcd_gotoxy(1,2);
     lcd_putc("                ");
     }


//Funcion de selección de velocidad. Se van mostrando las velocidades hasta que se pulsa el botón select.
void selvel(){
    lcd_gotoxy(1,1);
    lcd_putc("Seleccione la V");
    SEL=input(SELECT);
    while (SEL==1){
       SEL=input(SELECT);
       vel=read_adc()/100;
       if (vel==0)   vel=1;
       lcd_gotoxy(1,2);
       printf(lcd_putc,"%lu  ", vel);
       delay_ms(15);
       }
     //flag=1;
     lcd_gotoxy(1,1);
     lcd_putc("Velocidad seleccionada:");
     lcd_gotoxy(1,2);
     printf(lcd_putc,"%lu", vel);
     delay_ms(300);
     BorrFila2();
     delay_ms(300);
     lcd_gotoxy(1,2);
     printf(lcd_putc,"%lu", vel);
     delay_ms(300);
     BorrFila2();
     delay_ms(300);
     lcd_gotoxy(1,2);
     printf(lcd_putc,"%lu", vel);
     delay_ms(300);
     BorrFila2();
     delay_ms(300);
     lcd_gotoxy(1,2);
     printf(lcd_putc,"%lu", vel);
     BorrFila2();
     lcd_gotoxy(1,1);
     printf(lcd_putc,"Velocidad: %lu    ", vel);
     }
   
//En main se realiza la inicialización de PWM, timers y la selección de velocidad. Además En while (true) se puede encontrar 
//la opción para parar el motor.
void main (){  
   //printf("Paso1");
   configura();
   configuraPWM();
   disable_interrupts(GLOBAL);
   lcd_gotoxy(1,1);
   lcd_putc("Bienvenido al");
   lcd_gotoxy(1,2);
   lcd_putc("control de motor");
   delay_ms(700);
   lcd_gotoxy(1,1);
   lcd_putc("DCPE Primavera");
   lcd_gotoxy(1,2);
   lcd_putc("2017");
   delay_ms(700);
   set_adc_channel(1);        //lectura del adc en el pin 3
   delay_us(30);
   lcd_init();
   selvel();
   while(true)
   {
      AI=input(AlCorr);
      AV=input(AlVolt);
      AT=input(AlTemp);
      Alarma=AV||AI||AT;
      lcd_gotoxy(5,2);
      printf(lcd_putc,"AI=%uAV=%uAT=%u", AI,AV,AT);
      
      
      //Mediante el boton de MENU mantenido  medio segundo, el sistema se para
      MARCHAant=MARCHA;
      SEL=input(SELECT);
      MARCHA=input(MENU);
      if (MARCHA==0 && OFF==0 && MARCHAant==1 && SEL==1 || Alarma ){
         delay_ms(120);
         MARCHA=input(MENU);
         MARCHAant=0;
         SEL=input(SELECT);            //eliminacion crashes
         if (MARCHA==0 && SEL==1 || Alarma){
            disable_interrupts(GLOBAL);
            OFF=1;
            lcd_gotoxy(1,2);
            lcd_putc("OFF");
            set_pwm1_duty(0);
            set_pwm2_duty(0);
            }
         }
      
      //Mediante el boton de MENU mantenido  medio segundo, el sistema se enciende, enc aso de que estuviera apagado  
      if (MARCHA==0 && OFF==1 && MARCHAant==1 && SEL==1){
         delay_ms(500);
         MARCHA=input(MENU);
         SEL=input(SELECT);            //eliminacion crashes
         if (MARCHA==0 && SEL==1){
            enable_interrupts(GLOBAL);
            OFF=0;
            lcd_gotoxy(1,2);
            lcd_putc("ON ");
         }
      }
      //Si se pulsan los dos botones se para el motor y se accede al menu de cambio de velocidad
      if (MARCHA==0 && SEL==0 ){
         delay_ms(500);
         SEL=input(SELECT);
         MARCHA=input(MENU);
         if (MARCHA==0 && SEL==0 ){
            disable_interrupts(GLOBAL);
            OFF=1;
            BorrFila2();
            lcd_gotoxy(5,2);
            lcd_putc("OFF");
            set_pwm1_duty(0);
            set_pwm2_duty(0);
            while (MARCHA==0 || SEL==0 ){
               SEL=input(SELECT);
               MARCHA=input(MENU);}
            selvel();
         }
      }
   }
}

